package hr.petkovic.diplomskibe.unit;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ActiveProfiles;

import hr.petkovic.diplomskibe.entity.Entry;
import hr.petkovic.diplomskibe.entity.EntryType;
import hr.petkovic.diplomskibe.entity.User;
import hr.petkovic.diplomskibe.repository.EntryRepo;
import hr.petkovic.diplomskibe.repository.EntryTypeRepo;
import hr.petkovic.diplomskibe.repository.UserRepo;
import hr.petkovic.diplomskibe.utility.Dictionary;

@DataJpaTest
@ActiveProfiles("test")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class EntryRepoUnitTest {
	@Autowired
	EntryTypeRepo tRepo;
	@Autowired
	EntryRepo eRepo;
	@Autowired
	UserRepo uRepo;

	@BeforeAll
	public void initDB() {
		if (!uRepo.findByUsername("test").isPresent()) {
			uRepo.save(generateUser());
		}
		if (tRepo.findAllByMainType(Dictionary.INCOME_TYPE).size() == 0) {
			for (EntryType t : generateIncomeTypes()) {
				tRepo.save(t);
			}
		}
		if (tRepo.findAllByMainType(Dictionary.EXPENSE_TYPE).size() == 0) {
			for (EntryType t : generateExpenseTypes()) {
				tRepo.save(t);
			}
		}
	}

	@Test
	public void saveEntry() {
		Entry e = eRepo.save(getTestEntry());

		assertThat(e.getDescription())
		.isEqualTo("Generated by test");
		
	}

	@Test
	public void getEntry() {
		Entry e = insertEntry(getTestEntry());
		
		e = eRepo.findById(e.getId()).get();
		assertThat(e.getDescription())
		.isEqualTo("Generated by test");
	}
	
	@Test
	public void updateEntry() {
		Entry e = insertEntry(getTestEntry());

		e = eRepo.findById(e.getId()).get();
		e.setAmount(100F); 
		eRepo.save(e);
		
		e = eRepo.findById(e.getId()).get();
		assertThat(e.getAmount()) 
		.isEqualTo(100F); 
		}
	  
	@Test
	public void deleteEntry() { 
		Entry e = insertEntry(getTestEntry());

		eRepo.deleteById(e.getId());
		assertThat(eRepo.findById(1L).isPresent()) 
		.isFalse(); 
	}
	 

	@AfterAll
	public void deleteAllEntries() {
		eRepo.deleteAll();
		tRepo.deleteAll();
		uRepo.deleteAll();
	}
	
	@Rollback(false)
	private Entry insertEntry(Entry e) {
		return eRepo.saveAndFlush(e);
	}
	private Entry getTestEntry() {
		Entry e = new Entry();
		e.setId(1L);
		e.setAmount(10F);
		e.setCreateDate(new Date());
		e.setCreatedBy(uRepo.findByUsername("test").get());
		e.setDescription("Generated by test");
		e.setType(tRepo.findAllByMainType(Dictionary.INCOME_TYPE).get(0));
		return e;
	}
	
	private User generateUser() {
		User u = new User();
		u.setEnabled(true);
		u.setPassword("test");
		u.setUsername("test");
		u.setTransactions(new ArrayList<>());
		return u;
	}

	private List<EntryType> generateIncomeTypes() {
		List<EntryType> list = new  ArrayList<>();
		list.add(new EntryType(Dictionary.INCOME_TYPE, "Pay", new ArrayList<>()));
		list.add(new EntryType(Dictionary.INCOME_TYPE, "Side Job", new ArrayList<>()));
		return list;
	}

	private List<EntryType> generateExpenseTypes() {
		List<EntryType> list = new  ArrayList<>();
		list.add(new EntryType(Dictionary.EXPENSE_TYPE, "Life", new ArrayList<>()));
		list.add(new EntryType(Dictionary.EXPENSE_TYPE, "Family", new ArrayList<>()));
		return list;
	}
}
